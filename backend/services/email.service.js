const nodemailer = require('nodemailer');

// Ensure EMAIL_USER and EMAIL_PASS are set in your .env file
const transporter = nodemailer.createTransport({
  service: 'gmail', // Or your preferred email provider
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS // For Gmail, consider using an App Password if 2FA is enabled
  },
  debug: process.env.NODE_ENV === 'development' // Enable debug logs only in development
});

/**
 * Sends a 4-digit verification OTP email.
 * @param {string} email - Recipient's email address.
 * @param {string} otp - The 4-digit OTP code.
 */
const sendVerificationEmail = async (email, otp) => {
  console.log(`Attempting to send verification OTP to: ${email}`);
  try {
    const info = await transporter.sendMail({
      from: `"ProCode Team" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: 'Your Email Verification Code',
      html: `
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
          <h2>Welcome to ProCode!</h2>
          <p>Your 4-digit verification code is:</p>
          <p style="font-size: 24px; font-weight: bold; color: #2563eb; letter-spacing: 2px; margin: 15px 0;">${otp}</p>
          <p>This code will expire in 10 minutes. Please do not share it with anyone.</p>
          <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
          <p style="font-size: 0.9em; color: #666;">If you didn't request this code, you can safely ignore this email.</p>
        </div>
      `
    });
    console.log(`Verification email sent successfully to ${email}: ${info.messageId}`);
  } catch (error) {
      console.error(`Error sending verification email to ${email}:`, error);
      // Re-throw a more specific error or handle it based on application needs
      throw new Error('Failed to send verification email.');
  }
};

/**
 * Sends a password reset link email.
 * @param {string} email - Recipient's email address.
 * @param {string} resetLink - The password reset link generated by Firebase.
 */
const sendPasswordResetEmail = async (email, resetLink) => {
    console.log(`Attempting to send password reset link to: ${email}`);
    try {
        const info = await transporter.sendMail({
          from: `"ProCode Team" <${process.env.EMAIL_USER}>`,
          to: email,
          subject: 'Reset Your ProCode Password',
          html: `
            <div style="font-family: Arial, sans-serif; line-height: 1.6;">
              <h2>Password Reset Request</h2>
              <p>You requested a password reset for your ProCode account associated with this email address.</p>
              <p>Click the link below to set a new password:</p>
              <p style="margin: 25px 0;">
                <a href="${resetLink}" style="background-color: #2563eb; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">Reset Password</a>
              </p>
              <p>This link will expire according to your Firebase settings (usually 1 hour). If you did not request a password reset, please ignore this email.</p>
              <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
               <p style="font-size: 0.9em; color: #666;">If the button above doesn't work, copy and paste the following URL into your browser:</p>
               <p style="font-size: 0.9em; color: #666; word-break: break-all;">${resetLink}</p>
            </div>
          `
        });
        console.log(`Password reset email sent successfully to ${email}: ${info.messageId}`);
    } catch (error) {
        console.error(`Error sending password reset email to ${email}:`, error);
        throw new Error('Failed to send password reset email.');
    }
};

module.exports = {
    sendVerificationEmail,
    sendPasswordResetEmail // Export the new function
};
