/* src/components/AITile/AITile.module.css */
/* Uses global CSS variables */

.aiTileContainer {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    border-radius: 0.375rem; /* rounded-md */
    padding: 0.5rem; /* p-2 */
    overflow: hidden;
    background-color: var(--panel-bg, #2d3748);
    border: 1px solid var(--panel-border, #4a5568);
  }
  [data-theme="light"] .aiTileContainer {
      background-color: var(--panel-bg-light, #ffffff);
      border-color: var(--panel-border-light, #e5e7eb);
  }
  
  .videoWrapper {
    width: 100%;
    height: 70%; /* Default height, adjust if text is always present */
    max-height: 280px; /* Max height for the video element */
    border-radius: 0.375rem;
    overflow: hidden;
    margin-bottom: 0.5rem;
    background-color: #000; /* Black background for video area */
    transition: height 0.3s ease-in-out; /* Smooth transition if height changes */
  }
  .videoWrapperFullScreen {
      height: 100%;
      max-height: none;
      margin-bottom: 0;
  }
  
  .videoElement {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Loading indicator is handled by DaisyUI 'loading' classes */
  
  .personaTextDisplay {
    width: 100%;
    min-height: 40px; /* Ensure some space for text */
    padding: 0.5rem 0.75rem;
    font-size: 0.9rem;
    color: var(--text-color);
    text-align: center;
    line-height: 1.4;
    overflow-y: auto; /* Scroll if text is long */
    max-height: 30%; /* Limit height of text area */
    opacity: 0; /* Hidden by default, shown with animation */
    transform: translateY(10px);
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
    box-sizing: border-box; /* Include padding in height calculation */
  }
  
  .personaTextDisplayVisible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* .thinkingIndicator can be merged with .personaTextDisplay or styled distinctly */
  /* For example, if isLLMProcessing is true, add a specific class to .personaTextDisplay */
  /* Or style the "Daniel is thinking..." text directly if needed */
  
  .errorText {
    color: var(--alert-error-text-color, #ef4444);
    font-weight: 500;
    padding: 1rem;
  }
  [data-theme="dark"] .errorText {
      color: var(--alert-error-text-color-dark, #f87171);
  }
  
  